import React, { useState, useEffect } from "react";

// –°–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç iOS
const systemFont = `-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif`;

export default function Home() {
  // ‚Äî‚Äî‚Äî –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã ‚Äî‚Äî‚Äî
  const [form, setForm] = useState({
    sector: "", subdivision: "", position: "", location: "", time: "", selectedGoals: [],
    side: null, targetNumber: "", noIssue: false, name: null, quantity: 1,
    azimuth: "", course: "", distance: "", height: "", detectionMethods: [],
    result: null, description: "", additionalInfo: "",
  });
  const [showTopFields, setShowTopFields] = useState(true);
  const [locks, setLocks] = useState({ sector: false, subdivision: false, position: false, location: false });
  const [errors, setErrors] = useState({ distance: false, height: false });

  // ‚Äî‚Äî‚Äî –¢–µ–º–∞ (—Å–≤–µ—Ç–ª–∞—è/—Ç–µ–º–Ω–∞—è) ‚Äî‚Äî‚Äî
  const [isDarkMode, setIsDarkMode] = useState(false);
  useEffect(() => {
    if (typeof window !== "undefined") {
      const saved = localStorage.getItem("theme");
      if (saved) setIsDarkMode(saved === "dark");
      else if (window.matchMedia('(prefers-color-scheme: dark)').matches) setIsDarkMode(true);
    }
  }, []);
  useEffect(() => {
    if (typeof window !== "undefined") localStorage.setItem("theme", isDarkMode ? "dark" : "light");
  }, [isDarkMode]);
  const toggleTheme = () => setIsDarkMode(prev => !prev);

  // ‚Äî‚Äî‚Äî –°–ø–∏—Å–∫–∏ ‚Äî‚Äî‚Äî
  const goalsList = [
    "–ë–ü–õ–ê", "–ü–æ—Å—Ç—Ä—ñ–ª–∏(–ó–£,–∫—É–ª–µ–º–µ—Ç)", "–í–∏—Ö–æ–¥–∏(–ü–ó–†–ö,–ó–†–ö)", "–í–∏–±—É—Ö", "–ö–†",
    "–ì–µ–ª—ñ–∫–æ–ø—Ç–µ—Ä", "–õ—ñ—Ç–∞–∫ –º–∞–ª–∏–π", "–õ—ñ—Ç–∞–∫ –≤–µ–ª–∏–∫–∏–π", "–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä",
    "–ó–æ–Ω–¥", "–Ü–Ω—à–µ (–¥–µ—Ç–∞–ª—ñ –≤ –æ–ø–∏—Å—ñ)",
  ];
  const namesList = ["Shahed-136", "–ì–µ—Ä–±–µ—Ä–∞", "–ù–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π"];

  // ‚Äî‚Äî‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî‚Äî‚Äî
  useEffect(() => {
    const now = new Date();
    setForm(f => ({ ...f, time: now.toLocaleTimeString("uk-UA", { hour: "2-digit", minute: "2-digit" }) }));
  }, []);

  // ‚Äî‚Äî‚Äî –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ ‚Äî‚Äî‚Äî
  useEffect(() => {
    if (typeof window !== "undefined") {
      const sf = localStorage.getItem("show_top_fields");
      if (sf !== null) setShowTopFields(sf === "true");
      const l = localStorage.getItem("report_locks");
      if (l) setLocks(JSON.parse(l));
      ["sector","subdivision","position","location"].forEach(key => {
        const v = localStorage.getItem(`report_${key}`);
        if (v !== null) setForm(f => ({ ...f, [key]: v }));
      });
    }
  }, []);
  useEffect(() => {
    if (typeof window !== "undefined") {
      localStorage.setItem("show_top_fields", showTopFields);
      localStorage.setItem("report_locks", JSON.stringify(locks));
    }
  }, [showTopFields, locks]);

  // ‚Äî‚Äî‚Äî –•–µ–Ω–¥–ª–µ—Ä—ã –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ‚Äî‚Äî‚Äî
  const handleChange = e => {
    const { name, value } = e.target;
    if (locks[name]) return;
    setForm(f => ({ ...f, [name]: value }));
    if (["sector","subdivision","position","location"].includes(name))
      localStorage.setItem(`report_${name}`, value);
  };
  const toggleLock = field => setLocks(l => ({ ...l, [field]: !l[field] }));
  const toggleGoal = g => setForm(f => ({
    ...f,
    selectedGoals: f.selectedGoals.includes(g)
      ? f.selectedGoals.filter(x => x !== g)
      : [...f.selectedGoals, g]
  }));
  const selectSide = s => setForm(f => ({ ...f, side: f.side === s ? null : s }));
  const selectName = n => setForm(f => ({ ...f, name: n }));
  const changeQuantity = d => setForm(f => ({ ...f, quantity: Math.max(1, f.quantity + d) }));
  const onFieldNumeric = (fieldName, max = 3) => e => {
    const digits = e.target.value.replace(/\D/g, "").slice(0, max);
    setForm(f => ({ ...f, [fieldName]: digits }));
    setErrors(err => ({ ...err, [fieldName]: !/^\d+$/.test(digits) }));
  };
  const toggleDetection = m => setForm(f => ({
    ...f,
    detectionMethods: f.detectionMethods.includes(m)
      ? f.detectionMethods.filter(x => x !== m)
      : [...f.detectionMethods, m]
  }));

  // ‚Äî‚Äî‚Äî –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–∞, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ WhatsApp ‚Äî‚Äî‚Äî
  const generateReportText = () => "–í–∞—à –∑–≤—ñ—Ç —Ç—É—Ç...";
  const copyReport = () => navigator.clipboard.writeText(generateReportText());
  const openWhatsApp = () => {
    const text = encodeURIComponent(generateReportText());
    window.open(`whatsapp://send?text=${text}`, "_blank");
  };

  // ‚Äî‚Äî‚Äî –°—Ç–∏–ª–∏ iOS ‚Äî‚Äî‚Äî
  const iosContainer = {
    fontFamily: systemFont,
    minHeight: "100vh",
    padding: "1rem",
    background: isDarkMode ? "#1C1C1E" : "#FFFFFF",
    color: isDarkMode ? "#F2F2F7" : "#1C1C1E",
    transition: "background 0.3s, color 0.3s"
  };
  const iosCard = {
    background: isDarkMode ? "rgba(44,44,46,0.9)" : "rgba(255,255,255,0.8)",
    borderRadius: "16px",
    padding: "1rem",
    marginBottom: "1rem",
    boxShadow: isDarkMode
      ? "0 2px 4px rgba(0,0,0,0.6)"
      : "0 2px 4px rgba(0,0,0,0.1)",
    transition: "background 0.3s, box-shadow 0.3s"
  };
  const iosButton = {
    padding: "0.6rem 1.2rem",
    fontSize: "1rem",
    borderRadius: "16px",
    border: "none",
    fontFamily: systemFont,
    cursor: "pointer",
    background: isDarkMode ? "#3A3A3C" : "#EBEBF5",
    color: isDarkMode ? "#F2F2F7" : "#1C1C1E",
    boxShadow: isDarkMode
      ? "inset 0 1px 0 rgba(255,255,255,0.1)"
      : "inset 0 1px 0 rgba(0,0,0,0.05)",
    transition: "background 0.3s, color 0.3s"
  };
  const iosLabel = { fontSize: "0.9rem", marginBottom: "0.3rem" };
  const iosInput = {
    width: "100%",
    padding: "0.6rem",
    borderRadius: "12px",
    border: "none",
    backgroundColor: isDarkMode ? "#2C2C2E" : "#ECECEC",
    fontSize: "1rem",
    marginBottom: "0.6rem",
    transition: "background 0.3s, color 0.3s"
  };

  const switchContainer = {
    width: "2.6rem",
    height: "1.4rem",
    borderRadius: "1rem",
    background: isDarkMode ? "#48484A" : "#E5E5EA",
    padding: "2px",
    display: "flex",
    alignItems: "center",
    cursor: "pointer",
    transition: "background 0.3s"
  };
  const switchThumb = {
    width: "1rem",
    height: "1rem",
    borderRadius: "50%",
    background: "#FFFFFF",
    transform: isDarkMode ? "translateX(1.2rem)" : "translateX(0)",
    transition: "transform 0.3s"
  };

  return (
      return (
    <div style={iosContainer}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ ...iosCard, display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <h1 style={{ margin: 0, fontSize: "1.4rem" }}>–ê–∫–í—ñ–∑ 2.0</h1>
        <div style={{ display: "flex", alignItems: "center", gap: "1rem" }}>
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã */}
          <button onClick={toggleTheme} style={switchContainer}>
            <div style={switchThumb} />
          </button>
          {/* –û–±–Ω–æ–≤–∏—Ç—å */}
          <button
            onClick={() => window.location.reload()}
            style={{ ...iosButton, background: "#8E8E93", color: "#FFFFFF" }}
          >
            –û–Ω–æ–≤–∏—Ç–∏
          </button>
        </div>
      </div>

      {/* –°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è */}
      <div style={{ ...iosCard, display: "flex", justifyContent: "center" }}>
        <button onClick={() => setShowTopFields(prev => !prev)} style={iosButton}>
          {showTopFields ? "–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø–æ–ª—è" : "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ª—è"}
        </button>
      </div>

      {/* –ü–µ—Ä–≤—ã–µ 4 –ø–æ–ª—è */}
      {showTopFields && (
        <div style={iosCard}>
          {/* –°–µ–∫—Ç–æ—Ä */}
          <label style={iosLabel}>–°–µ–∫—Ç–æ—Ä</label>
          <div style={{ display: "flex", gap: "0.5rem" }}>
            <input
              name="sector"
              value={form.sector}
              onChange={handleChange}
              style={iosInput}
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¶–û–ü"
            />
            <button onClick={() => toggleLock("sector")} style={iosButton}>
              {locks.sector ? "üîí" : "‚úèÔ∏è"}
            </button>
          </div>
          {/* –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª */}
          <label style={iosLabel}>–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª</label>
          <div style={{ display: "flex", gap: "0.5rem" }}>
            <input
              name="subdivision"
              value={form.subdivision}
              onChange={handleChange}
              style={iosInput}
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 3 –û–¢–ë—Ä"
            />
            <button onClick={() => toggleLock("subdivision")} style={iosButton}>
              {locks.subdivision ? "üîí" : "‚úèÔ∏è"}
            </button>
          </div>
          {/* –ü–æ–∑–∏—Ü—ñ—è */}
          <label style={iosLabel}>–ü–æ–∑–∏—Ü—ñ—è</label>
          <div style={{ display: "flex", gap: "0.5rem" }}>
            <input
              name="position"
              value={form.position}
              onChange={handleChange}
              style={iosInput}
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥ –ú–í–ì –•–∞–ª–∫"
            />
            <button onClick={() => toggleLock("position")} style={iosButton}>
              {locks.position ? "üîí" : "‚úèÔ∏è"}
            </button>
          </div>
          {/* –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç */}
          <label style={iosLabel}>–ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç</label>
          <div style={{ display: "flex", gap: "0.5rem" }}>
            <input
              name="location"
              value={form.location}
              onChange={handleChange}
              style={iosInput}
              placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥ –Ü–≤–∞–Ω—ñ–≤–∫–∞"
            />
            <button onClick={() => toggleLock("location")} style={iosButton}>
              {locks.location ? "üîí" : "‚úèÔ∏è"}
            </button>
          </div>
        </div>
      )}

      {/* –¶—ñ–ª—å */}
      <div style={iosCard}>
        <label style={iosLabel}>–¶—ñ–ª—å</label>
        <div style={{ display: "flex", flexWrap: "wrap", gap: "0.5rem" }}>
          {goalsList.map(goal => (
            <button
              key={goal}
              onClick={() => toggleGoal(goal)}
              style={{
                ...iosButton,
                background: form.selectedGoals.includes(goal) ? "#32D74B" : "#EBEBF5",
                color: form.selectedGoals.includes(goal) ? "#fff" : "#1C1C1E",
                borderRadius: "8px",
              }}
            >
              {goal}
            </button>
          ))}
        </div>
      </div>

      {/* –°—Ç–æ—Ä–æ–Ω–∞ */}
      <div style={iosCard}>
        <label style={iosLabel}>–°—Ç–æ—Ä–æ–Ω–∞</label>
        <div style={{ display: "flex", gap: "0.5rem" }}>
          {["–í–æ—Ä–æ–∂–∏–π", "–°–≤—ñ–π", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π"].map(s => (
            <button
              key={s}
              onClick={() => selectSide(s)}
              style={{
                ...iosButton,
                background: form.side === s ? "#32D74B" : "#EBEBF5",
                color: form.side === s ? "#fff" : "#1C1C1E",
              }}
            >
              {s}
            </button>
          ))}
        </div>
      </div>

      {/* –ù–æ–º–µ—Ä —Ü—ñ–ª—ñ */}
      {!form.noIssue && (
        <div style={iosCard}>
          <label style={iosLabel}>–ù–æ–º–µ—Ä —Ü—ñ–ª—ñ</label>
          <div style={{ display: "flex", gap: "0.5rem", alignItems: "center" }}>
            <input
              name="targetNumber"
              value={form.targetNumber}
              onChange={handleChange}
              style={iosInput}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ü—ñ–ª—ñ"
            />
            <button
              onClick={() =>
                setForm(f => ({ ...f, noIssue: true, targetNumber: "" }))
              }
              style={{
                ...iosButton,
                height: "44px",
                whiteSpace: "nowrap",
              }}
            >
              –ë–µ–∑ –≤–∏–¥–∞—á—ñ
            </button>
          </div>
          {form.targetNumber.trim() === "" && (
            <div style={{ color: "#FF3B30", fontSize: "0.75rem", marginTop: "0.25rem" }}>
              –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å ¬´–ë–µ–∑ –≤–∏–¥–∞—á—ñ¬ª
            </div>
          )}
        </div>
      )}

      {/* –ù–∞–∑–≤–∞ */}
      <div style={iosCard}>
        <label style={iosLabel}>–ù–∞–∑–≤–∞</label>
        <div style={{ display: "flex", gap: "0.5rem" }}>
          {namesList.map(n => (
            <button
              key={n}
              onClick={() => selectName(n)}
              style={{
                ...iosButton,
                background: form.name === n ? "#32D74B" : "#EBEBF5",
                color: form.name === n ? "#fff" : "#1C1C1E",
              }}
            >
              {n}
            </button>
          ))}
        </div>
      </div>

      {/* –ö—ñ–ª—å–∫—ñ—Å—Ç—å */}
      <div style={iosCard}>
        <label style={iosLabel}>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</label>
        <div style={{ display: "flex", gap: "0.5rem", alignItems: "center" }}>
          <button
            onClick={() => changeQuantity(-1)}
            style={{
              ...iosButton,
              padding: "0.5rem 0.9rem",
              background: "#FF375F",
              color: "#fff",
            }}
            disabled={form.quantity <= 1}
          >
            ‚Äì
          </button>
          <span style={{ fontSize: "1.2rem", width: "2rem", textAlign: "center" }}>
            {form.quantity}
          </span>
          <button
            onClick={() => changeQuantity(1)}
            style={{
              ...iosButton,
              padding: "0.5rem 0.9rem",
              background: "#32D74B",
              color: "#fff",
            }}
          >
            +
          </button>
        </div>
      </div>

      {/* –ê–∑–∏–º—É—Ç */}
      <div style={iosCard}>
        <label style={iosLabel}>–ê–∑–∏–º—É—Ç, ¬∞</label>
        <input
          type="text"
          inputMode="numeric"
          value={form.azimuth}
          onChange={onFieldNumeric("azimuth")}
          style={{
            ...iosInput,
            border: form.azimuth.trim() === "" ? "1px solid #FF3B30" : "1px solid transparent",
          }}
          placeholder="0‚Äì359"
        />
        {form.azimuth.trim() === "" && (
          <div style={{ color: "#FF3B30", fontSize: "0.75rem" }}>–ü–æ–ª–µ –º–∞—î –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º!</div>
        )}
      </div>

      {/* –ö—É—Ä—Å */}
      <div style={iosCard}>
        <label style={iosLabel}>–ö—É—Ä—Å, ¬∞</label>
        <input
          type="text"
          inputMode="numeric"
          value={form.course}
          onChange={onFieldNumeric("course")}
          style={iosInput}
          placeholder="0‚Äì359"
        />
      </div>

      {/* –í—ñ–¥—Å—Ç–∞–Ω—å */}
      <div style={iosCard}>
        <label style={iosLabel}>–í—ñ–¥—Å—Ç–∞–Ω—å, –º*</label>
        <input
          type="text"
          inputMode="numeric"
          value={form.distance}
          onChange={e => changeDistance(+e.target.value)}
          style={{
            ...iosInput,
            border: form.distance.trim() === "" || errors.distance ? "1px solid #FF3B30" : "1px solid transparent",
          }}
          placeholder="–í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü—ñ–ª—ñ"
        />
        {errors.distance && (
          <div style={{ color: "#FF3B30", fontSize: "0.75rem" }}>–ü–æ–ª–µ –º–∞—î –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º!</div>
        )}
      </div>

      {/* –í–∏—Å–æ—Ç–∞ */}
      <div style={iosCard}>
        <label style={iosLabel}>–í–∏—Å–æ—Ç–∞, –º*</label>
        <input
          type="text"
          inputMode="numeric"
          value={form.height}
          onChange={e => changeHeight(+e.target.value)}
          style={{
            ...iosInput,
            border: form.height.trim() === "" || errors.height ? "1px solid #FF3B30" : "1px solid transparent",
          }}
          placeholder="–í–∏—Å–æ—Ç–∞"
        />
        {errors.height && (
          <div style={{ color: "#FF3B30", fontSize: "0.75rem" }}>–ü–æ–ª–µ –º–∞—î –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º!</div>
        )}
      </div>

      {/* –í–∏—è–≤ */}
      <div style={iosCard}>
        <label style={iosLabel}>–í–∏—è–≤</label>
        <div style={{ display: "flex", gap: "0.5rem", marginBottom: "0.5rem" }}>
          {["–ê–∫—É—Å—Ç–∏—á–Ω–æ", "–í—ñ–∑—É–∞–ª—å–Ω–æ"].map(m => (
            <button
              key={m}
              onClick={() => toggleDetection(m)}
              style={{
                ...iosButton,
                flex: 1,
                background: form.detectionMethods.includes(m) ? "#32D74B" : "#EBEBF5",
                color: form.detectionMethods.includes(m) ? "#fff" : "#1C1C1E",
              }}
            >
              {m}
            </button>
          ))}
        </div>
        <button
          onClick={() => toggleDetection("–Ü–∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏–ª–∞–¥—ñ–≤ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è")}
          style={{
            ...iosButton,
            background: form.detectionMethods.includes("–Ü–∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏–ª–∞–¥—ñ–≤ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è")
              ? "#32D74B"
              : "#EBEBF5",
            color: form.detectionMethods.includes("–Ü–∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏–ª–∞–¥—ñ–≤ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è")
              ? "#fff"
              : "#1C1C1E",
          }}
        >
          –Ü–∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏–ª–∞–¥—ñ–≤ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è
        </button>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      <div style={iosCard}>
        <label style={iosLabel}>–†–µ–∑—É–ª—å—Ç–∞—Ç</label>
        <div style={{ display: "flex", gap: "0.5rem" }}>
          {["–£—Ä–∞–∂–µ–Ω–æ", "–ù–µ —É—Ä–∞–∂–µ–Ω–æ", "–î–æ—Å—Ç–æ–≤—ñ—Ä–Ω–æ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ"].map(r => (
            <button
              key={r}
              onClick={() => setForm(f => ({ ...f, result: r }))}
              style={{
                ...iosButton,
                background: form.result === r ? "#32D74B" : "#EBEBF5",
                color: form.result === r ? "#fff" : "#1C1C1E",
              }}
            >
              {r}
            </button>
          ))}
        </div>
      </div>

      {/* –û–ø–∏—Å */}
      <div style={iosCard}>
        <label style={iosLabel}>–û–ø–∏—Å</label>
        <textarea
          name="description"
          value={form.description}
          onChange={handleChange}
          placeholder="–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
          style={{ ...iosInput, height: "80px" }}
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –ö–æ–ø—ñ—é–≤–∞—Ç–∏/WhatsApp */}
      <div style={{ display: "flex", gap: "0.5rem", marginBottom: "2rem" }}>
        <button onClick={copyReport} style={iosButton}>
          –ö–æ–ø—ñ—é–≤–∞—Ç–∏
        </button>
        <button onClick={openWhatsApp} style={{ ...iosButton, background: "#34C759", color: "#fff" }}>
          WhatsApp
        </button>
      </div>

      {/* –û—Ç—á–µ—Ç */}
      <div style={iosCard}>
        <pre style={{ whiteSpace: "pre-wrap", fontSize: "0.9rem" }}>
          {generateReportText()}
        </pre>
      </div>
    </div>
  );
}
